//Book.java

import io.swagger.v3.oas.annotations.media.Schema;

@Schema(description = "Details about the book")
public class Book {
    @Schema(description = "The unique ID of the book", example = "1")
    private Long id;

    @Schema(description = "The title of the book", example = "Sample Title")
    private String title;

    @Schema(description = "The author of the book", example = "Sample Author")
    private String author;

    // Constructors, getters, and setters
    public Book(Long id, String title, String author) {
        this.id = id;
        this.title = title;
        this.author = author;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }
}

//BookController.java
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/books")
@Tag(name = "Books", description = "Operations related to books")
public class BookController {

    @GetMapping("/{id}")
    @Operation(
        summary = "Get a book by ID",
        description = "Retrieve details of a book using its ID",
        responses = {
            @ApiResponse(
                responseCode = "200",
                description = "Successfully retrieved book",
                content = @Content(schema = @Schema(implementation = Book.class))
            ),
            @ApiResponse(
                responseCode = "404",
                description = "Book not found"
            )
        }
    )
    public Book getBook(@PathVariable Long id) {
        // Sample implementation
        return new Book(id, "Sample Title", "Sample Author");
    }
}

//MainApplication.java

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MainApplication {

    public static void main(String[] args) {
        SpringApplication.run(MainApplication.class, args);
    }
}

# application-test.properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update

// build.gradle
plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'com.h2database:h2'

    // Springdoc OpenAPI
    implementation 'org.springdoc:springdoc-openapi-ui:2.1.0'
}

test {
    useJUnitPlatform()
}
